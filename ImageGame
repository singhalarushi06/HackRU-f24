package src.wqu;

import java.awt.*;
import java.awt.event.*;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.imageio.ImageIO;
import javax.swing.*;

/**
 * Images are loaded from a CSV file, and displayed in a grid.
 * A random image appears in the middle.
 * The player must match sequences of images.
 */
public class ImageGame {
    // List holding images loaded from the CSV file
    private List<ImageIcon> images;

    private ImageIcon displayedImage;
    private ImageGameDisplay gameDisplay;
    private JButton playButton;
    private JLabel statusText;
    private JLabel highScoreLabel;
    private String[] correctImages;
    private String[] answeredImages;
    private int inputIndex;
    private int currentIndex;
    private final int IMAGE_COUNT = 10; // Total number of images in the grid

    public static void main(String[] args) {
        ImageGame game = new ImageGame();
        SwingUtilities.invokeLater(() -> game.Driver());
    }

    // Constructor
     public ImageGame() {
        images = loadImages("./src/wqu/images"); // Load images from CSV
        if (images.size() < IMAGE_COUNT) {
            System.out.println("Not enough images loaded for display. Ensure the CSV has at least 10 images.");
        }
    }

    // Method to load images from a folder of images
    // Method to load images from a folder of images
private List<ImageIcon> loadImages(String folderPath) {
    List<ImageIcon> images = new ArrayList<>();
    File folder = new File(folderPath);

    // Check if the folder exists and is a directory
    if (folder.exists() && folder.isDirectory()) {
        // Get all files in the directory
        File[] files = folder.listFiles();

        if (files != null) {
            for (File file : files) {
                // Check if the file is an image by extension
                if (file.isFile() && isImageFile(file)) {
                    try {
                        // Load the image and add it to the list as an ImageIcon
                        ImageIcon imageIcon = new ImageIcon(ImageIO.read(file));
                        images.add(imageIcon);
                    } catch (IOException e) {
                        System.out.println("Error loading image: " + file.getName());
                    }
                }
            }
        }
    } else {
        System.out.println("Invalid folder path or folder does not exist: " + folderPath);
    }

    return images;
}

// Helper method to check if a file is an image
private boolean isImageFile(File file) {
    // Simple extension check to filter common image types
    String[] imageExtensions = { ".png", ".jpg", ".jpeg", ".gif", ".bmp" };
    String fileName = file.getName().toLowerCase();

    for (String extension : imageExtensions) {
        if (fileName.endsWith(extension)) {
            return true;
        }
    }
    return false;
}


    // Class to handle the game display
    private class ImageGameDisplay extends JPanel {
        private BufferedImage background;

        public ImageGameDisplay() {
            super();
            try {
                background = ImageIO.read(new File("./src/wqu/background.png")); // Optional background image
            } catch (Exception io) {
                System.out.println(io.getMessage());
                System.out.println("Error Reading background.png image.");
            }
            setupDisplay();
            this.setPreferredSize(new Dimension(500, 500)); // Adjust panel size as needed
        }

        // Set up the grid display for the images
        private void setupDisplay() {
            if (images.size() < IMAGE_COUNT) return;
        }

        @Override
        public void paintComponent(Graphics g) {
            super.paintComponent(g);
            if (background != null) {
                g.drawImage(background, 0, 0, this);
            }

            // Draw images in a 2x5 grid at the top of the screen
            int imageWidth = 90;  // Width of each image compartment
            int imageHeight = 90; // Height of each image compartment
            int xOffset = 30;     // Horizontal offset for grid start
            int yOffset = 20;     // Vertical offset for grid start

            for (int i = 0; i < images.size(); i++) {
                ImageIcon icon = images.get(i);
                int x = xOffset + (i % 5) * (imageWidth + 10); // Calculate x position in the grid
                int y = yOffset + (i / 5) * (imageHeight + 10); // Calculate y position in the grid
                g.drawImage(icon.getImage(), x, y, imageWidth, imageHeight, this);
            }

            // Draw the displayed image in the center of the bottom half of the screen
            if (displayedImage != null) {
                int centerX = 200;
                int centerY = 300;
                g.drawImage(displayedImage.getImage(), centerX, centerY, 100, 100, this); // Center image size 100x100
            }
        }
    }

    // Main game logic
    public void playGame() {
        correctImages = new String[15];
        answeredImages = new String[15];

        // Randomly choose images for the sequence
        for (int index = 0; index < 15; index++) {
            int rand = (int) (Math.random() * images.size());
            correctImages[index] = images.get(rand).toString();
            while (index > 0 && correctImages[index].equals(correctImages[index - 1])) {
                rand = (int) (Math.random() * images.size());
                correctImages[index] = images.get(rand).toString();
            }
        }

        // Display the sequence of images for the player
        for (int max = 1; max < 20; max++) {
            for (int round = 0; round < max; round++) {
                int select = round;
                displayedImage = images.get(Integer.parseInt(correctImages[select]));
                gameDisplay.revalidate();
                gameDisplay.repaint();
                try {
                    Thread.sleep(800);
                    displayedImage = null;
                    gameDisplay.revalidate();
                    gameDisplay.repaint();
                } catch (InterruptedException ie) {
                    System.out.println(ie.getMessage());
                }
            }

            inputIndex = 0;
            currentIndex = -1;
            long startWaitTime = System.currentTimeMillis();
            while (inputIndex < max) {
                long currTime = System.currentTimeMillis();
                long seconds = currTime - startWaitTime;
                if (currentIndex == inputIndex) {
                    if (!correctImages[inputIndex].equals(answeredImages[inputIndex])) {
                        inputIndex = 0;
                        currentIndex = -1;
                        SwingUtilities.invokeLater(() -> {
                            statusText.setText("You Lose!");
                            playButton.setVisible(true);
                        });
                        return;
                    }
                    startWaitTime = System.currentTimeMillis();
                    inputIndex++;
                } else if (seconds > 2500) {
                    SwingUtilities.invokeLater(() -> {
                        statusText.setText("You Lose!");
                        playButton.setVisible(true);
                    });
                    return;
                }
            }
            answeredImages = new String[15];
            if (max > Integer.parseInt(highScoreLabel.getText())) {
                int high = max;
                SwingUtilities.invokeLater(() -> highScoreLabel.setText("" + high));
            }
        }
        SwingUtilities.invokeLater(() -> {
            statusText.setText("You Win!");
            playButton.setVisible(true);
        });
    }

    // Driver to launch the game interface
    // display with a window, some controls, start button, and text showing progress
    public void Driver() {
        JFrame display = new JFrame("Image Game");
        display.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        JPanel window = new JPanel();
        window.setLayout(new BoxLayout(window, BoxLayout.PAGE_AXIS));

        JPanel controls = new JPanel();
        gameDisplay = new ImageGameDisplay();

        playButton = new JButton("Play!");
        statusText = new JLabel("");
        highScoreLabel = new JLabel("0");

        playButton.addActionListener(e -> {
            SwingUtilities.invokeLater(() -> {
                statusText.setText("");
                playButton.setVisible(false);
            });
            new Thread(this::playGame).start();
        });

        controls.add(new JLabel("High Score: "));
        controls.add(highScoreLabel);
        controls.add(playButton);
        controls.add(statusText);

        window.add(controls);
        window.add(gameDisplay);

        display.add(window);
        display.pack();
        display.setResizable(false);
        display.setVisible(true);
    }
}
